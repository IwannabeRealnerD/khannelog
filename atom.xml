<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/khannelog/</id>
    <title>khannelog Blog</title>
    <updated>2022-08-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/khannelog/"/>
    <subtitle>khannelog Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/khannelog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Turborpo와 pnpm]]></title>
        <id>turborepo_with_pnpm</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/turborepo_with_pnpm"/>
        <updated>2022-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_S230" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-info alert alert--info admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span><mdxadmonitiontitle><strong><code>pnpm</code></strong>과 함께 <strong><code>Turborpo</code></strong>를 사용해 보자!</mdxadmonitiontitle></div><div class="admonitionContent_EVia"></div></div><h2 class="anchor anchorWithStickyNavbar_S230" id="왜-turborepo랑-pnpm이야">왜 Turborepo랑 pnpm이야?<a class="hash-link" href="#왜-turborepo랑-pnpm이야" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_S230" id="pnpm">pnpm<a class="hash-link" href="#pnpm" title="제목으로 바로 가기">​</a></h3><ul><li>이전 글에서 읽었던 pnpm의 장점과 추가로<ul><li>일단 빠르고 겹치는 node 패키지들을 hardlink, symlink를 이용하여 해결하기 때문에 용량 관리 가능!</li><li>node_modules가 hoisting 되지 않아 유령 의존성 해결 - 옵션으로 hoisting 가능</li></ul></li><li>yarn berry 보다 아직 까진 상대적으로 migration에 대한 위험성이 낮음 -&gt; node_modules를 사용하는건 여전히 똑같으니, 은근 pnp 기능이 아직 까지 문제를 많이 일으킴</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="turborepo">turborepo<a class="hash-link" href="#turborepo" title="제목으로 바로 가기">​</a></h3><div class="theme-admonition theme-admonition-info alert alert--info admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span><mdxadmonitiontitle>비교 대상 <code>nx</code>, <code>turborepo</code>, <code>lerna</code> -&gt; 소거법으로 선택함.</mdxadmonitiontitle></div><div class="admonitionContent_EVia"></div></div><ul><li><p><strong><code>lerna</code></strong>는 메인테이너의 번아웃으로 인해 nx를 만든 nrwl가 관리함 <a href="https://betterprogramming.pub/lerna-is-officially-dead-long-live-monorepos-9853c80a7b0e" target="_blank" rel="noopener noreferrer">Lerna is Officially Dead</a></p></li><li><p><strong><code>nx</code></strong></p><ul><li>속도 + 기능 면에선 아직까지 글 작성 면에서는 nx가 제일 많고 빠름</li><li>모노레포에서 하나의 라이브러리 버전만을 사용하기 위해 모노레포 최상단 디렉터리에 하나의 package.json을 설치</li><li>프로젝트 간 라이브러리 버전이 다를 수 도 있는데 이런식으로 진행되면 프로젝트마다 사용된 라이브러리 버전 추적이 귀찮아짐.</li><li>플러그인에 종속된 듯한 느낌을 받았음 - 물론 "그럼 만들면되는거아냐?"라는 질문에 봉착할 수 있지만서도... 그렇게 가지 해서 만들기가 흠... 고민좀 해보자</li></ul></li><li><p><strong><code>turborepo</code></strong></p><ul><li>vercel에서 인수한 모노레포 프로젝트!</li><li>nx에 비하면 조금 느리긴 하지만 여전히 속도면에서도 나쁘지 않다. - 비슷한 캐싱 전략</li><li>nx의 복잡함 + 플러그인 종속성이 싫어지던 찰나에... 요런게 있다고???</li><li>복잡하지 않음에 매료 됐음 + nx를 도입하기 제일 꺼렸던 single-version-policy가 없음</li><li>요놈이닷!!!</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_S230" id="시작하기">시작하기<a class="hash-link" href="#시작하기" title="제목으로 바로 가기">​</a></h2><hr><p>무의미한 초기 설정법은 링크로 대체한다!
<a href="https://turborepo.org" target="_blank" rel="noopener noreferrer">turborepo 공식문서</a></p><h2 class="anchor anchorWithStickyNavbar_S230" id="참조">참조<a class="hash-link" href="#참조" title="제목으로 바로 가기">​</a></h2><hr><p><a href="https://vercel.com/templates/next.js/monorepo" target="_blank" rel="noopener noreferrer">Monorepo with Turborepo - vercel</a></p><p><a href="https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo" target="_blank" rel="noopener noreferrer">Turborepo로 모노레포 개발 경험 향상하기 - LINE Engineering</a></p><p><a href="https://d2.naver.com/helloworld/7553804" target="_blank" rel="noopener noreferrer">모던 프론트엔드 프로젝트 구성기법 - NAVER D2</a></p><p><a href="https://blog.logrocket.com/managing-full-stack-monorepo-pnpm/" target="_blank" rel="noopener noreferrer">Managing a full-stack, multipackage monorepo using pnpm - LogRocket</a></p>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="pnpm" term="pnpm"/>
        <category label="turborepo" term="turborepo"/>
        <category label="monorepo" term="monorepo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm vs yarn-berry]]></title>
        <id>pnpm_vs_yarn-berry</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/pnpm_vs_yarn-berry"/>
        <updated>2022-07-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_S230" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-info alert alert--info admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span><mdxadmonitiontitle><code>NPM</code> vs <code>Yarn Classic(v1)</code> vs <code>Yarn Berry(v2)</code> vs <code>PNPM</code></mdxadmonitiontitle></div><div class="admonitionContent_EVia"></div></div><ul><li>Yarn Classic과 Yarn Berry는 다르다는걸 인지하고 읽어보자.<ul><li>현시점(2022년 7월 22일) 기준으로 Yarn Classic은 기능 추가 또는 개선없이 관리만 진행되는 중</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_S230" id="1-1-npm과-yarn-classicyarn-v1">1-1. npm과 Yarn classic(Yarn v1)<a class="hash-link" href="#1-1-npm과-yarn-classicyarn-v1" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_S230" id="npm">npm<a class="hash-link" href="#npm" title="제목으로 바로 가기">​</a></h3><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span><mdxadmonitiontitle><code>NPM은 Node Package Manager의 약자가 아닙니다</code> - <a href="https://github.com/npm/cli#is-npm-an-acronym-for-node-package-manager" target="_blank" rel="noopener noreferrer">NPM-CLI 깃헙 링크</a></mdxadmonitiontitle></div><div class="admonitionContent_EVia"></div></div><ul><li>2010년에 시작된 프로젝트</li><li>NPM 이름이 <strong><code>N</code></strong>ode <strong><code>PM</code></strong>, <strong><code>N</code></strong>ew <strong><code>PM</code></strong>을 노리고 만든거라는데… 약간.. 초큼…흠..ㅎㅋ.ㅎ.;;;</li><li>처음엔 여러 이슈들이 있었으나 대부분 해결 된 상태<ul><li>lock 파일의 부재</li><li>보안 이슈</li></ul></li><li><strong><code>패키지 관리자의 시작</code></strong><ul><li>이전 까진 패키지를 모두 수동으로 설치 및 관리 했었음 + NPM 모듈로 출시하기가 편했음 - 편의성덕분에 승승 장구, <strong>하지만..</strong></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="yarn-classic-yarn-v1">Yarn classic (Yarn v1)<a class="hash-link" href="#yarn-classic-yarn-v1" title="제목으로 바로 가기">​</a></h3><blockquote><p><strong>Yet Anoter Resource Negotiator</strong></p></blockquote><ul><li>2016년에 페이스북 + 구글 + 기타등등이 출시한 새로운 패키지 관리자</li><li>npm과 똑같은 의존성 해결 방식을 채택함 → 여전히 비효율적인 패키지 의존성관리</li><li>출시 당시엔 npm에 비해 상대적으로 좋은 성능으로 관심을 받았었음 → 요즘은 비슷비슷, 각자의 장점을 닮아가는 중</li><li>.lock 파일의 존재를 처음으로 만듬 → 이후엔 npm에서도 .lock 파일을 제공</li><li>2020년 부터 maintenance mode가 됨 → <code>추가 기능 개발 없이 관리만 진행</code> 중</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="yarn과-npm의-문제점">yarn과 npm의 문제점<a class="hash-link" href="#yarn과-npm의-문제점" title="제목으로 바로 가기">​</a></h3><ul><li>node_modules를 이용해 dependency를 관리함, 중복된 dependency가 많음 → 저장공간을 많이 차지함, 어쩔땐 같은 패키지를 메모리에 중복되게 인스턴스화 함</li><li><a href="https://pnpm.io/motivation#creating-a-non-flat-node_modules-directory" target="_blank" rel="noopener noreferrer">유령 의존성(phantom dependency)</a></li></ul><h2 class="anchor anchorWithStickyNavbar_S230" id="1-2-pnpm">1-2 pnpm<a class="hash-link" href="#1-2-pnpm" title="제목으로 바로 가기">​</a></h2><hr><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbc085663-6538-4769-b210-fedcbe3ae17c%2FUntitled.png?table=block&amp;id=a00e89c2-0a2f-421b-98c3-e81c53216a71&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="pnpm 아이디어 사진" class="img_x0ZN"></p><h3 class="anchor anchorWithStickyNavbar_S230" id="npm-yarn-classic의-node_modules-평탄화">npm, Yarn classic의 node_modules 평탄화<a class="hash-link" href="#npm-yarn-classic의-node_modules-평탄화" title="제목으로 바로 가기">​</a></h3><ul><li>npm과 yarn classic은 중복된 패키지를 <strong><code>그나마</code></strong> 줄이기 위해 <strong><code>평탄화</code></strong><del>(으.. 군대용어)</del>를 수행함</li></ul><div class="codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-text codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#393A34"><span class="token plain">// 평탄화 전</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지A/node_modules/libName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지B/node_modules/libName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 평탄화 후</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libName</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>패키지 <code>A, B</code> 둘다 <code>libName</code>이란 패키지에 의존성을 가지고 있음</li><li>A, B 각자의 node_modules 아래에 패키지을 가지고 있을 경우 디스크 공간의 낭비!</li><li>패키지 1을 패키지 A와 B와 같이 <code>루트 디렉터리로 호이스팅</code> 함! →A와 B는 호이스팅된 1을 참조</li><li>이 <strong><code>평탄화</code></strong>로 인해 유령 의존성이 생김 -&gt; 직접 설치하지 않은 패키지이지만 평탄화로인해 루트 디렉터리로 호이스팅 되어 의도치 않은 패키지 사용</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="content-addressable-store">content addressable store<a class="hash-link" href="#content-addressable-store" title="제목으로 바로 가기">​</a></h3><ul><li>모든(서로다른 프로젝트) dependency를 하나의 파일에서 관리<ul><li>사용자의 홈디렉터리 아래(~/.pnpm-store)</li><li>hardlink되어있는 파일들(.pnpm-store)을 symlink로 연결</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="non-flat-node_modules-디렉터리">non-flat node_modules 디렉터리<a class="hash-link" href="#non-flat-node_modules-디렉터리" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8d652c9d-5d4a-4097-af71-9144f5150275%2Fnode-modules-structure-8ab301ddaed3b7530858b233f5b3be57.jpg?table=block&amp;id=aa1652de-10ec-4f91-86c3-5f140997c113&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="pnpm의 hardlink, symlink" class="img_x0ZN"></p><ul><li>pnpm은 기본 옵션으로 평탄화되지 않은 node_modules 디렉터리 구조를 만듬<ul><li>옵션으로 평탄화 가능</li></ul><div class="language-bash codeBlockContainer_dBzJ theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Kf9f"><pre tabindex="0" class="prism-code language-bash codeBlock_r5b4 thin-scrollbar"><code class="codeBlockLines_s4Gm"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># pnpm 프로젝트</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - 라이브러리 A </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">.pnpm과 symlink 되어있음</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - .pnpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - 라이브러리 A </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">라이브러리 A의 hardlink된 파일</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup_x4z8"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_fH_t" aria-hidden="true"><svg class="copyButtonIcon_p6DK" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_tmGn" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li>기본 설정으로 평탄화가 수행되지 않아 <code>유령 의존성이 사라짐</code></li><li>프로젝트의 node_modules에는 실제 파일이 아닌 각자 필요한 참조를 symlink로 연결 후 파일은 hardlink 시켜줌</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="평탄화를-없애기위한-pnpm의-노력">평탄화를 없애기위한 pnpm의 노력<a class="hash-link" href="#평탄화를-없애기위한-pnpm의-노력" title="제목으로 바로 가기">​</a></h3><ul><li>npm, yarn이 가지고 있던 <code>비효율적인 의존성 관리 방식을 해결</code> → content-addressable storage를 이용</li><li>npm, yarn은 실제 의존성 파일들은 node_modules에 존재하나 pnpm은 사용자의 홈디렉터리 아래(~/.pnpm-store)에 실제 dependency들을 저장 → pnpm의 node_modules들은 .pnpm-store로 링크로만 존재함</li><li>유령 의존성이 존재하며 실제 중복 파일들이 많이 존재하는 NPM의 node_modules보다 적은 용량 차지, 메모리에 중복된 인스턴스로 존재하지 않음</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="서로-닮아가는-패키지-관리자">서로 닮아가는 패키지 관리자<a class="hash-link" href="#서로-닮아가는-패키지-관리자" title="제목으로 바로 가기">​</a></h3><p><a href="https://pnpm.io/blog/2021/12/29/yearly-update#the-competition" target="_blank" rel="noopener noreferrer">2021년 pnpm의 발자취 | 공식문서</a></p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_Nwum"><div class="admonitionHeading_cPcp"><span class="admonitionIcon_AoTf"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span><mdxadmonitiontitle>이제는 <code>뭐가 더 월등히 더 좋다</code>가 무의미해 지지 않았을까..? 하는 생각이..</mdxadmonitiontitle></div><div class="admonitionContent_EVia"><p><del>물론 npm 너 빼구 ^^</del></p></div></div><ul><li>yarn - content-addressable storage 도입 예정</li><li>npm - symlink를 활용한 node_modules 방식 도입 예정</li></ul><h2 class="anchor anchorWithStickyNavbar_S230" id="1-3-yarn-berry">1-3 Yarn berry<a class="hash-link" href="#1-3-yarn-berry" title="제목으로 바로 가기">​</a></h2><hr><ul><li>2020년에 릴리즈 → 기존 Yarn과 전혀다른 코드베이스</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="pnpplug-n-play">PnP(Plug n Play)<a class="hash-link" href="#pnpplug-n-play" title="제목으로 바로 가기">​</a></h3><ul><li>다른 관리자들과 다르게 <code>node_modules대신 .pnp.cjs를 생성</code>함</li><li>중첩된 node_modules와는 다르게 하나의 파일로 존재<ul><li>의존성 검색이 효율적으로 수행됨 → 빨라짐</li><li>중첩된 파일구조인 node_modules를 순회하며 찾을 필요가 없음 → <code>.pnp.cjs에 실제 패키지 저장 위치 바로 참조가능</code></li><li>package를 검색한 후 거의 즉각적으로 페이지를 찾아갈 수 있게 됨</li></ul></li><li>실제 패키지들은 프로젝트 디렉터리에 <code>.yarn/cache/에 zip 파일로 존재</code> → 디스크를 차지하는 용량이 더줄어듬</li><li>의존성 호이스팅이 이루어지지 않아 유령 의존성이 사라짐</li></ul><h3 class="anchor anchorWithStickyNavbar_S230" id="zero-install">Zero Install<a class="hash-link" href="#zero-install" title="제목으로 바로 가기">​</a></h3><ul><li>기존 npm과 다른 패키지 관리자들은 브랜치를 바꾸거나 리포지터리를 당겨왔을 때 npm i, yarn install로 패키지들을 설치 → <code>node_modules가 너무 무거웠기 때문에 리포지터리에 같이 업로드 불가</code></li><li>Yarn berry에서는 패키지가 zip 파일로 압축되어 존재하기 때문에 용량이 현저히 낮음 + 중복된 패키지가 최소화됐으므로 기존 node_modules에 비해 용량이 매우 낮음 → 리포저터리에 업로드하여 사용 가능</li><li>브랜치를 바꾸거나 리포지터리를 새로 당겨왔을 때 <code>install 없이 바로 사용 가능</code></li></ul>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="pnpm" term="pnpm"/>
        <category label="yarn" term="yarn"/>
    </entry>
</feed>