<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-test-site.com/khannelog/</id>
    <title>khannelog Blog</title>
    <updated>2022-09-04T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-test-site.com/khannelog/"/>
    <subtitle>khannelog Blog</subtitle>
    <icon>https://your-docusaurus-test-site.com/khannelog/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[웹 표준의 중요성(퍼먹는 user-agent)]]></title>
        <id>browser-warzone</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/browser-warzone"/>
        <updated>2022-09-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_eW2B" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><blockquote><p><strong>user-agent에 대해 Araboza</strong></p></blockquote><h2 class="anchor anchorWithStickyNavbar_eW2B" id="tldr">TLDR;<a class="hash-link" href="#tldr" title="제목으로 바로 가기">​</a></h2><hr><ol><li>엣지는 크롬인척 하고 싶었고</li><li>크롬은 사파리인척 하고 싶었고</li><li>사파리는 KHTML인척 하고 싶었고</li><li>KHTML은 Gecko인척 하고 싶었고</li><li>모든 브라우저는 모질라인척을 하고싶었다</li></ol><ul><li>이젠 끔찍한 혼종이라 더 이상은 직접적인 의미는 없다 → 간접적으로 조합에 따라서 브라우저 유추는 가능</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="들어가며">들어가며<a class="hash-link" href="#들어가며" title="제목으로 바로 가기">​</a></h2><hr><ul><li>브라우저 춘추 전국시대를 표현하는 글 입니다, 많이 왔다 갔다 하니 어지러움 주의!</li><li>브라우저가 처음 나왔을때는 당연히 웹표준이란건 존재하지도 않았습니다, 그리하여 브라우저 마다 렌더링 할 수 있는 능력이 달랐습니다 → 웹서버가 user-agent를 파싱하여 각 브라우저가 렌더링 할 수 있는 컨텐츠를 다르게 보내줬습니다.</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="ncsa-mosaic"><strong>NCSA Mosaic</strong><a class="hash-link" href="#ncsa-mosaic" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">NCSA_Mosaic/2.0 (Windows.3.1)</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>이미지를 표시할 수 있던 최초의 브라우저</li><li>개발 책임자였던 마크 앤드리슨이 넷스케이프 브라우저를 개발한 후 개발 중단 → MS가 기존 모자이크 저작권을 구매한 후 소스코드를 활요해 인터넷 익스플로러를 개발함 <del>불지옥의 서막</del></li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="mozillanetscape">Mozilla(Netscape)<a class="hash-link" href="#mozillanetscape" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/1.0(Win3.1)</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>Mosaic Killer의 줄임말</code> - 나중에 Netscape로 이름변경</li><li>해당 브라우저만 <code>프레임을 지원</code>해서 서버는 user-agent에 Mozilla가 보일 경우에만 프레임이 들어간 페이지를 반환했음 → user-agent 헤더에 Mozilla가 없을 경우 프레임이 존재하지 않는 페이지 반환</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="ie">IE<a class="hash-link" href="#ie" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>초창기엔 프레임을 지원하지 않다가</code> 이후 <code>업그레이드를 통해서 지원</code>하게 됨 -&gt; 당시 서버들은 요청 useragent에 mozilla가 들어간 사이트에만 프레임을 넣어 반환했으므로 IE도 <code>업데이트 이후 user-agent에 "Mozilla" 추가</code></li><li>MS가 IE를 Windows 운영체제 기본 브라우저로 제공 + Mozilla보다 나은 기능을 제공 → <code>높은 점유율</code>, 넷스케이프의 몰락</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="firefox">Firefox<a class="hash-link" href="#firefox" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_eW2B" id="이름-변경의-순서">이름 변경의 순서<a class="hash-link" href="#이름-변경의-순서" title="제목으로 바로 가기">​</a></h3><ul><li>Mozilla(Mosaic killer) → Netscape → IE로 인해 몰락 → Mozilla로 다시 이름 변경 → 결국 Firefox로 변경</li></ul><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1)&nbsp;Gecko/20020826</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>넷스케이프에서 <code>Gecko 엔진</code>(렌더링 엔진, 웹 표준을 잘 지키고 있었음)을 기반으로한 브라우저 모질라를 출시 -&gt; 이후 Firefox로 이름을 바뀜</li><li>Firefox는 웹표준 잘 지키고 있고 IE는 썅마이웨이로 인해 서버는 user-agent에 mozilla는 신경 안쓰고 Gecko가 있을 경우에만 웹표준에 준수한 페이지를 보내줌</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="konqueror">Konqueror<a class="hash-link" href="#konqueror" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML,&nbsp;like Gecko)</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>KHTML도 웹 표준 준수하는 엔진인데 Gecko가 안들어갔단 이유로 IE와 같은 취급 받을거 같다는 걱정이 생김 - 그래서 맨뒤에 like Gecko를 붙임</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="safari">Safari<a class="hash-link" href="#safari" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de)&nbsp;AppleWebKit/85.7&nbsp;(KHTML, like Gecko)&nbsp;Safari/85.5</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_eW2B" id="webkit">WebKit<a class="hash-link" href="#webkit" title="제목으로 바로 가기">​</a></h3><ul><li>KHTML을 기반으로 훨씬 많은 기능을 추가한 WebKit 엔진을 새로 개발된 오픈소스 엔진</li><li>Apple, Google, Nokia등등이 함께 개발</li><li>추후에 구글은 webkit과 손절 치고 webkit에서 fork된 chromium 브라우저를 사용</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="chrome">Chrome<a class="hash-link" href="#chrome" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>Webkit은 구글 + 애플과 함께 여러 벤더사들이 만들었던 오픈소스 브라우저 엔진</li><li>Webkit을 기반으로 브라우저를 만듬 - 사파리인척을 하고 싶었음</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="크로미움-이전-edge">크로미움 이전 EDGE<a class="hash-link" href="#크로미움-이전-edge" title="제목으로 바로 가기">​</a></h2><hr><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">Mozilla/5.0 (Windows NT 10.0; Win64; x64; ServiceUI 11) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>기존 IE 코드를 버리고 새로운 EDGE 브라우저를 만듬 -&gt; 크롬과의 호환성을높였다는 것을 장점을 세워 크롬을 따라함</li><li>요즘 Edge는 크로미움 엔진을 사용 → 국내 사이트 중 chrome으론 안돌아 가지만 Edge에는 돌아가는 사이트들 존재</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="번외---오페라">번외 - 오페라<a class="hash-link" href="#번외---오페라" title="제목으로 바로 가기">​</a></h3><blockquote><p><strong>"우리는 우리 사용자들이 오페라가 어떤 브라우저 인척 하는지 선택하게 할거에요.."</strong></p></blockquote><ul><li>1995년 부터 2013년 까진 자체 <code>presto</code> 엔진을 사용함</li><li>현재는 <code>chromium</code> 기반</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="참조">참조<a class="hash-link" href="#참조" title="제목으로 바로 가기">​</a></h2><hr><p><a href="https://webaim.org/blog/user-agent-string-history/" target="_blank" rel="noopener noreferrer">WebAIM - History of the browser user-agent string</a></p><p><a href="https://en.wikipedia.org/wiki/Opera_(web_browser)" target="_blank" rel="noopener noreferrer">Wikipedia - Opera</a></p><p><a href="https://en.wikipedia.org/wiki/WebKit" target="_blank" rel="noopener noreferrer">Wikipedia - Webkit</a></p><p><a href="https://www.wired.com/2013/04/blink/" target="_blank" rel="noopener noreferrer">WIRED - Google Chrome Breaks Up With Apple's WebKit</a></p>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="browser" term="browser"/>
        <category label="chromium" term="chromium"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Overload를 이용한 유연한 파라미터 타입지정]]></title>
        <id>typescript-overload</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/typescript-overload"/>
        <updated>2022-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_eW2B" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><blockquote><p>함수 overloading을 이용해 좀 더 TypeSafe하고 유연한 함수를 만들어보자!</p></blockquote><h2 class="anchor anchorWithStickyNavbar_eW2B" id="1-overloading">1. Overloading<a class="hash-link" href="#1-overloading" title="제목으로 바로 가기">​</a></h2><hr><blockquote><p><strong>같은 함수의 이름을 지니고 있으나 매개변수, 리턴타입등의 특징이 다른 여러개의 함수를 생성하게 해줌</strong></p></blockquote><ul><li><code>Type Union으로도 가능</code>하나 Type Union의 경우 매개변수의 값에 대한 or 그리고 반환값에 대한 or 밖에 지정해주지 못함
→ A 타입의 매개변수 시 A 타입으로 반환
→ B 타입의 매개변수 입력 시 B 타입으로 반환
과 같은 엄격한 Typing 불가</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="예시">예시<a class="hash-link" href="#예시" title="제목으로 바로 가기">​</a></h3><div class="language-tsx codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-tsx codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> testFunc </span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">Arg</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ...생략</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>타입 설명</strong></p><ul><li>Arg는 string또는 number 타입이다.</li><li>반환값은 Arg와 무관하게 string 또는 numer 이다.</li><li>Arg가 string 일때 반환값 또한 string 또는 Arg가 number일 경우 반환 값 또한 number과 같은 설정불가. → TypeScript의 제일 장점 중 하나인 타입추론의 유연함과 엄격함이 존재하지 않는 코드로 작성됨.</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="2-해결-전-상황">2. 해결 전 상황<a class="hash-link" href="#2-해결-전-상황" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_eW2B" id="의도한-상황">의도한 상황<a class="hash-link" href="#의도한-상황" title="제목으로 바로 가기">​</a></h3><ul><li>arg1이 "A"일 경우 arg2 없어도 됨(없어야함 -&gt; 타입추론의 정확성을 위해)</li><li>arg1이 "B"일 경우 arg2는 반드시 string 타입로 존재해야함</li></ul><div class="language-tsx codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-tsx codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">TestFuncDef</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arg1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"A"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"B"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arg2</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> testFunc</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">TestFuncDef</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arg2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// arg1이 "A"일 경우 arg2 없어도 됨(없어야함 -&gt; 타입추론의 정확성을 위해)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// arg1이 "B"일 경우 arg2는 반드시 string 타입로 존재해야함</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>위와 같은 코드로 testFunc 함수를 사용 중 이었으나 TS 엔진은 파라미터 조건에 대한 타입 추론을 못하는 중</li><li>코드 작성 시 <code>arg1이 “A”일 경우 arg2를 입력하지 않는다 정도의 수동적인 개발</code>중 이였음</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="3-해결">3. 해결<a class="hash-link" href="#3-해결" title="제목으로 바로 가기">​</a></h2><hr><div class="language-tsx codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-tsx codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token class-name">TestFuncDef</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"A"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arg2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"B"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> testFunc </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">TestFuncDef</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arg2</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>인터페이스를 이용한 함수 오버로딩으로 함수 호출 시 두가지 경우의 수에 대한 선언 → 2. 의도한 상황 참조</li><li>함수 내부에 사용될 경우 arg1은 함수 호출 시 항상 존재하지만 arg2는 경우에 따라 존재하지 않을 수 도 있으므로 옵셔널 파라미터를 사용해 함수 내부에서 걸러내는 로직을 추가</li></ul>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="typescript" term="typescript"/>
        <category label="type inference" term="type inference"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm을 더 깊게...]]></title>
        <id>pnpm_deeper</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/pnpm_deeper"/>
        <updated>2022-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_eW2B" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-info alert alert--info admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>pnpm쟝... 내가.. 좀더 알아보게 허락해주겠어?</div><div class="admonitionContent_Ye8G"></div></div><ul><li>결국 돌고돌아(npm -&gt; yarn -&gt; yarn berry) pnpm으로 정착</li><li><a href="/khannelog/pnpm_vs_yarn-berry">이전 글</a>에서 pnpm을 선택한 이유를 이미 설명했으므로 생략</li><li><del>추가된 pnpm 사용 이유 -&gt; 마이너 감성 완.전.충.족.앗.흥.</del></li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="한마디로">한마디로<a class="hash-link" href="#한마디로" title="제목으로 바로 가기">​</a></h3><blockquote><p>symlink, hardlink를 이용하여 효율적인 디스크 공간 관리 및 속도를 중요시 하는 패키지 관리자 <del>제일 합리적여</del></p></blockquote><h2 class="anchor anchorWithStickyNavbar_eW2B" id="pnpm-이해에-필요한-기본지식">pnpm 이해에 필요한 기본지식<a class="hash-link" href="#pnpm-이해에-필요한-기본지식" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_eW2B" id="content-addressable-store">content-addressable store<a class="hash-link" href="#content-addressable-store" title="제목으로 바로 가기">​</a></h3><blockquote><p>이하 CSA로 통일</p></blockquote><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">pnpm</span><span class="token plain"> store path </span><span class="token comment" style="color:#999988;font-style:italic"># ~/pnpm/store/v3 - pnpm 설치 방법마다 다름</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2781d7bb-0ca3-411b-9a76-19657b265c71%2FScreen_Shot_2022-09-18_at_11.22.55_PM.png?table=block&amp;id=0b7f395b-8c58-4132-8109-42fbdefc7ec2&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=1510&amp;userId=&amp;cache=v2" class="img_buSx"></p><ul><li>간단히 설명하면 <code>패키지 파일 중앙 저장 관리소</code></li><li>node_modules의 무거운 패키지 지옥을 해결하는 방법</li><li><code>npm</code>, `yarn`` -100개의 프로젝트에 30개의 동일한 버전의 라이브러리가 있음, 동일한 버전임에도 불구하고 30개의 복사본이 존재하여 디스크 저장공간을 낭비함</li><li><code>pnpm</code> - pnpm의 CAS에 실제 파일들이 저장되고 프로젝트에서 사용하고자 할때는 CAS에 저장된 파일들을 hardlink해 사용하기 때문에 설치 속도(file io가 없기 때문) 및 디스크 저장공간의 효율적인 관리가 가능함</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="inode">inode<a class="hash-link" href="#inode" title="제목으로 바로 가기">​</a></h3><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -i </span><span class="token comment" style="color:#999988;font-style:italic"># 138232 node_modules</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>index-node의 줄임말</li><li>파일 시스템에 <code>주민등록번호</code> -&gt; 파일 시스템 내에 파일, 디렉터리들은 고유한 inode 값을 가지고 있음</li><li>symlink(softlink 라고도 부름, 이하 symlink로 통일)로 연결된 파일은 같은 파일을 바라보고 있다 해도 서로 다른 symlink를 가지고 있음</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="hardlink">hardlink<a class="hash-link" href="#hardlink" title="제목으로 바로 가기">​</a></h3><ul><li>2개 이상의 파일들이 하나의 inode를 직접 참조하는 것</li><li>A(원본) 파일이 삭제되더라도 A를 hardlink한 B 파일은 여전히 존재 및 참조 가능</li><li>보조기억장치에 저장된 파일 접근 시 inode를 활용하여 직접 접근하므로 symlink보다 성능이 비교적 좋음</li><li>디렉터리 hardlink 불가</li><li>파일들이 하드링크된 파일은 용량을</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="symlink">symlink<a class="hash-link" href="#symlink" title="제목으로 바로 가기">​</a></h3><ul><li>2개 이상의 파일들이 존재할 때 바로가기와 비슷한 형태로 하나의 파일을 참조하는 것</li><li>윈도우의 바로가기와 비슷한 형태 -&gt; 파일 참조 시 원본 파일을 경유하므로 hardlink에 비해 비교적 속도가 느림</li><li>A(원본) 파일이 삭제되되면 A를 symlink한 B파일은 참조 불가</li><li>디렉터리 symlink 가능</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="npm의-node_modules-구조">npm의 node_modules 구조<a class="hash-link" href="#npm의-node_modules-구조" title="제목으로 바로 가기">​</a></h2><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># npm의 패키지 설치 방식을 확인을 위한 테스트 프로젝트 초기화</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">mkdir</span><span class="token plain"> npm1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> init -y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> react</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>node_modules 확인 시 호이스팅 된 패키지들 확인 가능</p><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">cd</span><span class="token plain"> node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -a </span><span class="token comment" style="color:#999988;font-style:italic"># .package-lock.json, react, js-tokens ,.bin, loose-envify</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>js-tokens, loose-envify 패키지가 npm의 <del>shameful 한</del> 호이스팅의 결과물</li><li>패키지 호이스팅으로 인해 유령 의존성이 생김</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="bin-디렉터리">.bin 디렉터리<a class="hash-link" href="#bin-디렉터리" title="제목으로 바로 가기">​</a></h3><p>사용자의 컴퓨터 아키텍쳐에 따라 미리 컴파일된 바이너리 또는 실행가능한 파일이 존재하는 디렉터리, 해당 프로젝트 실행 시 필요한 실행파일들이 존재하는 디렉터리</p><h2 class="anchor anchorWithStickyNavbar_eW2B" id="pnpm의-node_modules-구조">pnpm의 node_modules 구조<a class="hash-link" href="#pnpm의-node_modules-구조" title="제목으로 바로 가기">​</a></h2><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">mkdir</span><span class="token plain"> pnpm1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">pnpm</span><span class="token plain"> init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">pnpm</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> react</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -a </span><span class="token comment" style="color:#999988;font-style:italic"># react, .modules.yaml, pnpm</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>실제로 사용자가 설치한 react 패키지만 (symlink, .pnpm 디렉터리에 존재하는 패키지) 최상단에 존재 (hositing 없음, 추가 설정으로 hoisting되게 설정 가능)</li><li>사용자가 설치한 패키지만 존재함 -&gt; 유령 의존성이 해결됨</li><li><del>.pnpm/<a href="mailto:react@18.2.0" target="_blank" rel="noopener noreferrer">react@18.2.0</a>/node_modules/react의 symlink</del> - 아직 이해 어려우니 일단 알고만 있도록! 아래에 추가설명</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="pnpm">.pnpm<a class="hash-link" href="#pnpm" title="제목으로 바로 가기">​</a></h3><blockquote><p>실제 hardlink와 symlink의 마법이 이루어지는 장소</p></blockquote><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">pwd</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># ~/pnpm1/node_modules/.pnpm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -a </span><span class="token comment" style="color:#999988;font-style:italic"># js-tokens@4.0.0, loose-envify@1.4.0, react@18.2.0, lock.yaml, node_modules</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>npm에서 호이스팅으로 평탄화된 디렉터리 구조 그대로 존재</li></ul><blockquote><p>하드링크된 모든 파일들은 .pnpm 디렉터리에 존재</p></blockquote><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">pwd</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># ~/pnpm1/node_modules</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -al</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># ...생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># lrwxr-xr-x  1 khannewayne  staff   37 Sep 17 10:54 react -&gt; .pnpm/react@18.2.0/node_modules/react</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>하드링크된 파일들은 모두 .pnpm 디렉터리에 존재하고 node_modules 최상단에 존재하는 패키지 디렉터리는 <strong><code>.pnpm 내부로 symlink</code></strong> 되어있음</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="pnpm과-csa를-매핑-해보기">.pnpm과 CSA를 매핑 해보기<a class="hash-link" href="#pnpm과-csa를-매핑-해보기" title="제목으로 바로 가기">​</a></h3><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># .pnpm에 inode 확인</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">pwd</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># ~/pnpm1/node_modules/.pnpm</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> react@18.2.0/node_modules/react</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -ali index.js </span><span class="token comment" style="color:#999988;font-style:italic"># 4303682 -rw-r--r--  35 khannewayne  staff  190 Aug 18 22:30 index.js</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># CSA위치 확인</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">pnpm</span><span class="token plain"> store path </span><span class="token comment" style="color:#999988;font-style:italic"># ~/pnpm/store/v3 - pnpm 설치 방법마다 다름</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> ~/pnpm/store/v3/files </span><span class="token comment" style="color:#999988;font-style:italic"># CSA에 실제 패키지 파일들이 설치된 위치로 이동</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">find</span><span class="token plain"> </span><span class="token builtin class-name">.</span><span class="token plain"> -inum </span><span class="token number" style="color:#36acaa">4303682</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># ./25/412e88974b83582fa47ec907cb4d2a30b9027a19215609...</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><a href="mailto:react@18.2.0" target="_blank" rel="noopener noreferrer">react@18.2.0</a>의 node_moduels에 react로 이동해 inode 확인</li><li>확인한 inode 값을 CSA로 이동 후 find 명령어를 이용해 파일 검색 - HIT!</li><li>CSA에 실제로 존재하는 패키지 파일을 확인할 수 있음</li><li>.pnpm에 존재하는 모든 파일들은 CSA에서 중앙 관리 -&gt; 프로젝트가 늘어나면 늘어날수록 더욱더 효율적인 패키지관리 가능!, 속도는 덤</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="참조">참조<a class="hash-link" href="#참조" title="제목으로 바로 가기">​</a></h2><p><a href="https://stackoverflow.com/questions/55600026/purpose-of-the-bin-directory-within-node-modules-what-are-binaries" target="_blank" rel="noopener noreferrer">stackoverflow - Purpose of the .bin directory within node_modules? What are binaries?</a></p><p><a href="https://pnpm.io/symlinked-node-modules-structure" target="_blank" rel="noopener noreferrer">pnpm docs - Symlinked <code>node_modules</code> structure</a></p><p><a href="https://i5i5.tistory.com/341" target="_blank" rel="noopener noreferrer">tistory - [Linux] 리눅스 시스템의 아이노드(inode), 심볼릭 링크(Symbolic Link), 하드 링크(Hard Link)에 대해서.</a></p><p><a href="https://blog.devgenius.io/hard-link-and-a-symbolic-link-any-difference-ef8b9bd61734" target="_blank" rel="noopener noreferrer">medium - Hard link and a Symbolic link, any difference?</a></p>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="pnpm" term="pnpm"/>
        <category label="symlink" term="symlink"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm vs yarn-berry]]></title>
        <id>pnpm_vs_yarn-berry</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/pnpm_vs_yarn-berry"/>
        <updated>2022-07-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_eW2B" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-info alert alert--info admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span><mdxadmonitiontitle><code>NPM</code> vs <code>Yarn Classic(v1)</code> vs <code>Yarn Berry(v2)</code> vs <code>PNPM</code></mdxadmonitiontitle></div><div class="admonitionContent_Ye8G"></div></div><ul><li>다른사람이 좋다길래~ 하고 yarn berry만 쓰지맙시다.</li></ul><ul><li>Yarn Classic과 Yarn Berry는 다르다는걸 인지하고 읽어보자.<ul><li>현시점(2022년 7월 22일) 기준으로 Yarn Classic은 기능 추가 또는 개선없이 관리만 진행되는 중</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="1-1-npm과-yarn-classicyarn-v1">1-1. npm과 Yarn classic(Yarn v1)<a class="hash-link" href="#1-1-npm과-yarn-classicyarn-v1" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_eW2B" id="npm">npm<a class="hash-link" href="#npm" title="제목으로 바로 가기">​</a></h3><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span><mdxadmonitiontitle><code>NPM은 Node Package Manager의 약자가 아닙니다</code> - <a href="https://github.com/npm/cli#is-npm-an-acronym-for-node-package-manager" target="_blank" rel="noopener noreferrer">NPM-CLI 깃헙 링크</a></mdxadmonitiontitle></div><div class="admonitionContent_Ye8G"></div></div><ul><li>2010년에 시작된 프로젝트</li><li>NPM 이름이 <strong><code>N</code></strong>ode <strong><code>PM</code></strong>, <strong><code>N</code></strong>ew <strong><code>PM</code></strong>을 노리고 만든거라는데… 약간.. 초큼…흠..ㅎㅋ.ㅎ.;;;</li><li>처음엔 여러 이슈들이 있었으나 대부분 해결 된 상태<ul><li>lock 파일의 부재</li><li>보안 이슈</li></ul></li><li><strong><code>패키지 관리자의 시작</code></strong><ul><li>이전 까진 패키지를 모두 수동으로 설치 및 관리 했었음 + NPM 모듈로 출시하기가 편했음 - 편의성덕분에 승승 장구, <strong>하지만..</strong></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="yarn-classic-yarn-v1">Yarn classic (Yarn v1)<a class="hash-link" href="#yarn-classic-yarn-v1" title="제목으로 바로 가기">​</a></h3><blockquote><p><strong>Yet Anoter Resource Negotiator</strong></p></blockquote><ul><li>2016년에 페이스북 + 구글 + 기타등등이 출시한 새로운 패키지 관리자</li><li>npm과 똑같은 의존성 해결 방식을 채택함 → 여전히 비효율적인 패키지 의존성관리</li><li>출시 당시엔 npm에 비해 상대적으로 좋은 성능으로 관심을 받았었음 → 요즘은 비슷비슷, 각자의 장점을 닮아가는 중</li><li>.lock 파일의 존재를 처음으로 만듬 → 이후엔 npm에서도 .lock 파일을 제공</li><li>2020년 부터 maintenance mode가 됨 → <code>추가 기능 개발 없이 관리만 진행</code> 중</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="yarn과-npm의-문제점">yarn과 npm의 문제점<a class="hash-link" href="#yarn과-npm의-문제점" title="제목으로 바로 가기">​</a></h3><ul><li>node_modules를 이용해 dependency를 관리함, 중복된 dependency가 많음 → 저장공간을 많이 차지함, 어쩔땐 같은 패키지를 메모리에 중복되게 인스턴스화 함</li><li><a href="https://pnpm.io/motivation#creating-a-non-flat-node_modules-directory" target="_blank" rel="noopener noreferrer">유령 의존성(phantom dependency)</a></li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="1-2-pnpm">1-2 pnpm<a class="hash-link" href="#1-2-pnpm" title="제목으로 바로 가기">​</a></h2><hr><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbc085663-6538-4769-b210-fedcbe3ae17c%2FUntitled.png?table=block&amp;id=a00e89c2-0a2f-421b-98c3-e81c53216a71&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="pnpm 아이디어 사진" class="img_buSx"></p><h3 class="anchor anchorWithStickyNavbar_eW2B" id="npm-yarn-classic의-node_modules-평탄화">npm, Yarn classic의 node_modules 평탄화<a class="hash-link" href="#npm-yarn-classic의-node_modules-평탄화" title="제목으로 바로 가기">​</a></h3><ul><li>npm과 yarn classic은 중복된 패키지를 <strong><code>그나마</code></strong> 줄이기 위해 <strong><code>평탄화</code></strong><del>(으.. 군대용어)</del>를 수행함</li></ul><div class="codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-text codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token plain">// 평탄화 전</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지A/node_modules/libName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지B/node_modules/libName</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 평탄화 후</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">패키지B</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libName</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>패키지 <code>A, B</code> 둘다 <code>libName</code>이란 패키지에 의존성을 가지고 있음</li><li>A, B 각자의 node_modules 아래에 패키지을 가지고 있을 경우 디스크 공간의 낭비!</li><li>패키지 1을 패키지 A와 B와 같이 <code>루트 디렉터리로 호이스팅</code> 함! →A와 B는 호이스팅된 1을 참조</li><li>이 <strong><code>평탄화</code></strong>로 인해 유령 의존성이 생김 -&gt; 직접 설치하지 않은 패키지이지만 평탄화로인해 루트 디렉터리로 호이스팅 되어 의도치 않은 패키지 사용</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="content-addressable-store">content addressable store<a class="hash-link" href="#content-addressable-store" title="제목으로 바로 가기">​</a></h3><ul><li>모든(서로다른 프로젝트) dependency를 하나의 파일에서 관리<ul><li>사용자의 홈디렉터리 아래(~/.pnpm-store)</li><li>hardlink되어있는 파일들(.pnpm-store)을 symlink로 연결</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="non-flat-node_modules-디렉터리">non-flat node_modules 디렉터리<a class="hash-link" href="#non-flat-node_modules-디렉터리" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F8d652c9d-5d4a-4097-af71-9144f5150275%2Fnode-modules-structure-8ab301ddaed3b7530858b233f5b3be57.jpg?table=block&amp;id=aa1652de-10ec-4f91-86c3-5f140997c113&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="pnpm의 hardlink, symlink" class="img_buSx"></p><ul><li>pnpm은 기본 옵션으로 평탄화되지 않은 node_modules 디렉터리 구조를 만듬<ul><li>옵션으로 평탄화 가능</li></ul><div class="language-bash codeBlockContainer_t23h theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_wF63"><pre tabindex="0" class="prism-code language-bash codeBlock_VeLm thin-scrollbar"><code class="codeBlockLines_nTAq"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># pnpm 프로젝트</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/node_modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - 라이브러리 A </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">.pnpm과 symlink 되어있음</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - .pnpm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - 라이브러리 A </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">라이브러리 A의 hardlink된 파일</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup_u6Ja"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_Ze3n" aria-hidden="true"><svg class="copyButtonIcon_SO8u" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_IZwW" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li>기본 설정으로 평탄화가 수행되지 않아 <code>유령 의존성이 사라짐</code></li><li>프로젝트의 node_modules에는 실제 파일이 아닌 각자 필요한 참조를 symlink로 연결 후 파일은 hardlink 시켜줌</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="평탄화를-없애기위한-pnpm의-노력">평탄화를 없애기위한 pnpm의 노력<a class="hash-link" href="#평탄화를-없애기위한-pnpm의-노력" title="제목으로 바로 가기">​</a></h3><ul><li>npm, yarn이 가지고 있던 <code>비효율적인 의존성 관리 방식을 해결</code> → content-addressable storage를 이용</li><li>npm, yarn은 실제 의존성 파일들은 node_modules에 존재하나 pnpm은 사용자의 홈디렉터리 아래(~/.pnpm-store)에 실제 dependency들을 저장 → pnpm의 node_modules들은 .pnpm-store로 링크로만 존재함</li><li>유령 의존성이 존재하며 실제 중복 파일들이 많이 존재하는 NPM의 node_modules보다 적은 용량 차지, 메모리에 중복된 인스턴스로 존재하지 않음</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="서로-닮아가는-패키지-관리자">서로 닮아가는 패키지 관리자<a class="hash-link" href="#서로-닮아가는-패키지-관리자" title="제목으로 바로 가기">​</a></h3><p><a href="https://pnpm.io/blog/2021/12/29/yearly-update#the-competition" target="_blank" rel="noopener noreferrer">2021년 pnpm의 발자취 | 공식문서</a></p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span><mdxadmonitiontitle>이제는 <code>뭐가 더 월등히 더 좋다</code>가 무의미해 지지 않았을까..? 하는 생각이..</mdxadmonitiontitle></div><div class="admonitionContent_Ye8G"><p><del>물론 npm 너 빼구 ^^</del></p></div></div><ul><li>yarn - content-addressable storage 도입 예정</li><li>npm - symlink를 활용한 node_modules 방식 도입 예정</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="1-3-yarn-berry">1-3 Yarn berry<a class="hash-link" href="#1-3-yarn-berry" title="제목으로 바로 가기">​</a></h2><hr><ul><li>2020년에 릴리즈 → 기존 Yarn과 전혀다른 코드베이스</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="pnpplug-n-play">PnP(Plug n Play)<a class="hash-link" href="#pnpplug-n-play" title="제목으로 바로 가기">​</a></h3><ul><li>다른 관리자들과 다르게 <code>node_modules대신 .pnp.cjs를 생성</code>함</li><li>중첩된 node_modules와는 다르게 하나의 파일로 존재<ul><li>의존성 검색이 효율적으로 수행됨 → 빨라짐</li><li>중첩된 파일구조인 node_modules를 순회하며 찾을 필요가 없음 → <code>.pnp.cjs에 실제 패키지 저장 위치 바로 참조가능</code></li><li>package를 검색한 후 거의 즉각적으로 페이지를 찾아갈 수 있게 됨</li></ul></li><li>실제 패키지들은 프로젝트 디렉터리에 <code>.yarn/cache/에 zip 파일로 존재</code> → 디스크를 차지하는 용량이 더줄어듬</li><li>의존성 호이스팅이 이루어지지 않아 유령 의존성이 사라짐</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="zero-install">Zero Install<a class="hash-link" href="#zero-install" title="제목으로 바로 가기">​</a></h3><ul><li>기존 npm과 다른 패키지 관리자들은 브랜치를 바꾸거나 리포지터리를 당겨왔을 때 npm i, yarn install로 패키지들을 설치 → <code>node_modules가 너무 무거웠기 때문에 리포지터리에 같이 업로드 불가</code></li><li>Yarn berry에서는 패키지가 zip 파일로 압축되어 존재하기 때문에 용량이 현저히 낮음 + 중복된 패키지가 최소화됐으므로 기존 node_modules에 비해 용량이 매우 낮음 → 리포저터리에 업로드하여 사용 가능</li><li>브랜치를 바꾸거나 리포지터리를 새로 당겨왔을 때 <code>install 없이 바로 사용 가능</code></li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="결론">결론<a class="hash-link" href="#결론" title="제목으로 바로 가기">​</a></h2><div class="theme-admonition theme-admonition-info alert alert--info admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>PNPM으로 가즈아~</div><div class="admonitionContent_Ye8G"><h3 class="anchor anchorWithStickyNavbar_eW2B" id="yarn-berry-왜-안했어">yarn berry 왜 안했어?<a class="hash-link" href="#yarn-berry-왜-안했어" title="제목으로 바로 가기">​</a></h3><ul><li>아직 지원하지 않는 라이브러리(PnP, ZeroInstall) 때문에 아직까지 호환성 이슈가 존재(VSC... VSC... VSC, Storybook)</li><li>프로젝트에서 이주 시도 시 직접 마주친 문제만 5개정도 - 그에 반해 pnpm은 사소한 이슈 1개 정도?</li><li>Zero Install의 필요성을 잘느끼지 못했음 -&gt; 오히려 pnpm의 content-addressable storage가 더 매력적으로 느껴졌음</li><li>pnp 기능은 pnpm에서도 옵션으로 활성화 가능함</li></ul></div></div>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="pnpm" term="pnpm"/>
        <category label="yarn" term="yarn"/>
        <category label="npm" term="npm"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[리액트 기반 배포된 서비스의 난독화 되지않은 소스코드 노출에 대한 고찰]]></title>
        <id>react_human_readable_code</id>
        <link href="https://your-docusaurus-test-site.com/khannelog/react_human_readable_code"/>
        <updated>2022-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[⚽️ 목표]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_eW2B" id="️-목표">⚽️ 목표<a class="hash-link" href="#️-목표" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-info alert alert--info admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>모바일 소스코드 난독화 미수행이 취약점이면서 왜 웹 프론트에 대해서는 법적인 강제사항이 없을까?</div><div class="admonitionContent_Ye8G"></div></div><ul><li>제목 꼰스러운거 실화냐?~~~ 글쓴이 정신 차리자</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="tldr">🔍&nbsp;TLDR;<a class="hash-link" href="#tldr" title="제목으로 바로 가기">​</a></h2><hr><blockquote><p>법적 강제성은 애매하지만 간단한 설정으로 평문(개발 시 작성한 humand readable 코드)으로 노출되므로 제거</p></blockquote><p><del>코드작성 시 가독성, 재사용성 전부다 때려친 손난독화를한 코드면...Human Readable 코드라 해도 의미없는건 매한가지긴 하지만...</del></p><h2 class="anchor anchorWithStickyNavbar_eW2B" id="1-왜">1. 왜?<a class="hash-link" href="#1-왜" title="제목으로 바로 가기">​</a></h2><hr><ul><li>번들러 중 하나인 webpack 내부에 존재하는 babel은 최신 브라우저, 그리고 구형 브라우저에서도 JS 코드가 정상적으로 돌아가기위해 <a href="https://stackoverflow.com/questions/44931479/compiling-vs-transpiling" target="_blank" rel="noopener noreferrer">Transpile</a>을 수행합니다.</li><li>Transpile에 대한 결과(구형 브라우저 지원 + 압축)로 인해 Human Readable 코드가 아닌 난독화된 코드로 변경됨 -&gt; <code>애초에 난독화가 주 기능은 아님(SideEffect)</code></li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="2-어떻게-노출되는가">2. 어떻게 노출되는가?<a class="hash-link" href="#2-어떻게-노출되는가" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_eW2B" id="소스맵-파일-존재-시">소스맵 파일 존재 시<a class="hash-link" href="#소스맵-파일-존재-시" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ff8ecadbb-703e-4cea-b312-20cc7f604241%2F%25E1%2584%2589%25E1%2585%25A9%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25A9%25E1%2584%2583%25E1%2585%25B3%25E1%2584%2582%25E1%2585%25A9%25E1%2584%258E%25E1%2585%25AE%25E1%2586%25AF.png?table=block&amp;id=f8efbe43-0049-4306-9ee8-87f3c7b02c4a&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="배포된 서비스에서 확인 가능한 human readable 소스코드" class="img_buSx"></p><ul><li>(설정에 따라 다름)소스맵 파일을 제거하지 않을 경우 배포 후 개발자 도구 이용 시 소스코드가 Human Readable 상태로 노출됨</li><li>웹팩과 같은 번들러로 번들링 되기 전 코드 상태로 확인 가능 -&gt; 디렉터리 구조 또한 개발 당시 상황으로 나뉘어져 있음</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="소스맵-파일이-존재하지-않을-시">소스맵 파일이 존재하지 않을 시<a class="hash-link" href="#소스맵-파일이-존재하지-않을-시" title="제목으로 바로 가기">​</a></h3><p><img loading="lazy" src="https://iwannaberealnerd.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7cbb83b4-4dbb-4761-a983-c042094a1699%2Fuglify.png?table=block&amp;id=e7f984aa-5605-4372-bd3c-db2fb8ae86ed&amp;spaceId=35999598-bd0e-4e04-a70a-5396c69f115f&amp;width=2000&amp;userId=&amp;cache=v2" alt="배포된 서비스에서 확인가능한 human readable 하지않은 소스코드" class="img_buSx"></p><ul><li>소스맵 파일이 존재하여 완전 Human Readable 코드보다 상대적으로 코드 파악 및 분석이 어려움</li><li>디렉터리, 파일 구조 또한 번들링된 상태로 노출되어 코드 분석 및 파악이 더 어려움</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="3-나눠지는-의견들">3. 나눠지는 의견들<a class="hash-link" href="#3-나눠지는-의견들" title="제목으로 바로 가기">​</a></h2><hr><h3 class="anchor anchorWithStickyNavbar_eW2B" id="취약점이-아니다">취약점이 아니다<a class="hash-link" href="#취약점이-아니다" title="제목으로 바로 가기">​</a></h3><blockquote><p>"이게 취약점이 될까요? 어차피 프론트 코드는 브라우저상에 노출되는거고 Uglify 되어있다고 해도 시간 조금만 더들이면 바로 분석 및 우회 가능한거 아닌가요?" -보안 담당자 A 씨-</p></blockquote><ul><li>법적 강제성도 없으며 그나마 매핑되는 취약점도 모바일임. 웹에서만 서비스 하는 경우 해당사항이 아님</li><li>어차피 브라우저에서 돌아가는 코드임, 서버와는 전혀 상관 없음</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="취약점이-이다">취약점이 이다<a class="hash-link" href="#취약점이-이다" title="제목으로 바로 가기">​</a></h3><blockquote><p>"소스맵 파일이 굳이 프론트에 노출되어야할 이유가... 없지 않습니까? 오히려 노출되어서 잠재적 위험요소로 남겨 놓느니 제거하는 쪽으로 가는게 맞을거 같네요" -보안 담당자 B 씨-</p></blockquote><ul><li>모든 대응의 기준을 법적으로 따지기엔 너무 소극적인 태도이다, 법적 기준에는 최신 기술들의 적용이 항상 늦다, 유연하게 대응해야 한다. ex)주요정보통신기반시설 웹 진단기준에는 아직도 <code>포멧스트링, 자동화 공격과 같은 취약점들이 존재</code>한다</li><li>간단한 설정으로 내부 코드 유출 + 잠재적 위험 요소를 제거 할 수 있는 바겐 세일이 있는데... 이걸 안해?</li></ul><h2 class="anchor anchorWithStickyNavbar_eW2B" id="4-작성자의-의견">4. 작성자의 의견<a class="hash-link" href="#4-작성자의-의견" title="제목으로 바로 가기">​</a></h2><hr><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LrXW"><div class="admonitionHeading_UDHg"><span class="admonitionIcon_DefI"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>"모바일에 난독화가 안되어있는 코드면 다들 취약점이라고 난리인데... 모바일 보다 더 쉽게 접근 및 분석 가능한 웹에서 소스코드 난독화가 안이루어져 있는데... 이걸 왜 안잡아?"</div><div class="admonitionContent_Ye8G"></div></div><ul><li>모바일 애플리케이션 만큼의 권한은 아니지만 비슷할 정도로 권한을 가지고 있는 모던 브라우저 -&gt; 비슷했으면 비슷했지 상대적으로 모자라지 않은 위험성을 가지고 있음</li><li>보안은 무조건 백엔드지! 무슨 클라이언트 단 보안이야! 또는 법적근거가 아니다! 와 같은 소극적인 자세로는 <a href="https://www.ibm.com/docs/en/i/7.3?topic=security-layered-defense-approach" target="_blank" rel="noopener noreferrer">다계층 보안</a>을 구현하기 어려움</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="모바일-애플리케이션-exploit-프로세스">모바일 애플리케이션 exploit 프로세스<a class="hash-link" href="#모바일-애플리케이션-exploit-프로세스" title="제목으로 바로 가기">​</a></h3><ul><li>소스코드 난독화가 이루어져 있지 않은 웹/모바일 애플리케이션의 프로세스 복잡도 차이</li><li>모바일 애플리케이션은 훨씬더 많은 필요 조건이 동반되어야 함</li></ul><ol><li>앱다운로드</li><li>모바일 기기와 PC 연결</li><li>앱 추출</li><li>IDA나 JEB에로 분석</li><li>(추가) FRIDA와 같은 툴이 존재해야 동적 디버깅
(소스코드 직접 패치는... 쫌..)
(기기의 루팅이나 탈옥이 선행되지 않을 경우 그마저 힘듬)</li></ol><h3 class="anchor anchorWithStickyNavbar_eW2B" id="웹-애플리케이션-exploit-프로세스">웹 애플리케이션 exploit 프로세스<a class="hash-link" href="#웹-애플리케이션-exploit-프로세스" title="제목으로 바로 가기">​</a></h3><ul><li>변조 프로세스 → 단 두개의 프로세스!</li></ul><ol><li>웹페이지 접속</li><li>개발자 도구 켜기 (개발자 도구에서 소스코드 변조 및 동적 디버깅 가능)</li></ol><h2 class="anchor anchorWithStickyNavbar_eW2B" id="결론">결론<a class="hash-link" href="#결론" title="제목으로 바로 가기">​</a></h2><hr><ul><li>"노출되면 안된다!"에 대한 법적 근거는 없지만 모바일 애플리케이션의 취약점 리스트에 존재하는 <code>소스코드 난독화 여부</code>와 비슷한 취약점</li><li>오히려 모바일보다 쉽게 소스코드 접근 및 변조가 가능한 웹 애플리케이션인데... 이게 왜 취약점이 아닌지 궁금할 정도</li></ul><h3 class="anchor anchorWithStickyNavbar_eW2B" id="치트키">치트키<a class="hash-link" href="#치트키" title="제목으로 바로 가기">​</a></h3><ul><li><a href="https://webpack.kr/configuration/devtool/#root" target="_blank" rel="noopener noreferrer">webpack 공식 문서</a>에서 일반 이용자에게 전체 소스맵을 제공하지 말라했다구우우웃!</li></ul>]]></content>
        <author>
            <name>khanne wayne</name>
            <email>iwannaberealnerd@gmail.com</email>
            <uri>https://github.com/IwannabeRealnerD</uri>
        </author>
        <category label="pnpm" term="pnpm"/>
        <category label="yarn" term="yarn"/>
    </entry>
</feed>